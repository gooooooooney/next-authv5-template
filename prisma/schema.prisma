//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Status {
    todo
    inProgress
    done
    canceled
}

enum Label {
    bug
    feature
    enhancement
    documentation
}

enum Priority {
    low
    medium
    high
}

enum Theme {
    light
    dark
    system
}

enum RoleEnum {
    user
    admin
    superAdmin
}

enum MenuStatus {
    active
    inactive
}

enum MenuType {
    menu
    button
    dir
}

model Task {
    id String @id() @default(cuid())
    code String @unique()
    title String
    status Status @default(todo)
    label Label @default(bug)
    priority Priority @default(low)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('create,read', true)
/// @@deny('delete', auth().role.name == 'admin' && auth() == this)
/// @@deny('delete', role.name == 'superAdmin')
/// @@allow('delete', auth().role.name == 'admin')
model User {
    id String @id() @default(cuid())
    name String?
    email String? @unique()
    emailVerified DateTime?
    /// @password
    /// @omit
    password String
    image String?
    theme Theme? @default(system)
    role Role?
    roleId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    accounts Account[]
    sessions Session[]
}

model VerificationToken {
    id String @id() @default(cuid())
    email String
    token String @unique()
    expires DateTime

    @@unique([email, token])
}

model NewEmailVerificationToken {
    id String @id() @default(cuid())
    email String
    userId String
    token String @unique()
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id String @id() @default(cuid())
    email String
    token String @unique()
    expires DateTime

    @@unique([email, token])
}

model Role {
    id String @id() @default(cuid())
    name RoleEnum @default(user)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique()
}

model Menu {
    id String @id() @default(cuid())
    name String
    path String
    type MenuType
    status MenuStatus
    icon String
    parent Menu? @relation(fields: [parentId], references: [id])
    parentId String?
    children Menu[]
    createBy String
    updateBy String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}