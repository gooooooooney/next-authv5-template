//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Status {
    todo
    inProgress
    done
    canceled
}

enum Label {
    bug
    feature
    enhancement
    documentation
}

enum Priority {
    low
    medium
    high
}

enum Theme {
    light
    dark
    system
}

enum RoleEnum {
    user
    admin
    superAdmin
}

enum MenuStatus {
    active
    inactive
}

enum MenuType {
    menu
    button
    dir
}

model Task {
    id String @id() @default(cuid())
    code String @unique()
    title String
    status Status @default(todo)
    label Label @default(bug)
    priority Priority @default(low)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id() @default(cuid())
    name String?
    email String? @unique()
    emailVerified DateTime?
    /// @password
    /// @omit
    password String
    image String?
    theme Theme? @default(system)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    accounts Account[]
    sessions Session[]
    role Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId String
    /// created by which user
    createdBy User? @relation("UserCreatedBy", fields: [createdById], references: [id])
    createdById String? @unique()
    /// The users that this user has created
    createdUsers User[] @relation("UserCreatedBy")
}

model VerificationToken {
    id String @id() @default(cuid())
    email String
    token String @unique()
    expires DateTime

    @@unique([email, token])
}

model NewEmailVerificationToken {
    id String @id() @default(cuid())
    email String
    userId String
    token String @unique()
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id String @id() @default(cuid())
    email String
    token String @unique()
    expires DateTime

    @@unique([email, token])
}

model Role {
    id String @id() @default(cuid())
    name String @default("user")
    weight RoleEnum @default(user)
    users User[]
    menus Menu[]
    delete Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model Menu {
    id String @id() @default(cuid())
    name String
    path String
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId String
    type MenuType @default(menu)
    status MenuStatus @default(active)
    icon String?
    parent Menu? @relation("ParentChildrens", fields: [parentId], references: [id], onDelete: Cascade)
    parentId String?
    children Menu[] @relation("ParentChildrens")
    createBy String
    updateBy String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}