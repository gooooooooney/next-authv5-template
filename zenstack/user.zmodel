
import "./role"
// Necessary for Next auth
model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? // @db.Text
  access_token String? // @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? // @db.Text
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  password String @password @omit
  image String?
  theme Theme? @default(system)
  role Role?
  roleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts Account[]
  sessions Session[]
  // everyone can signup
  @@allow('create,read', true)

 
  // admin not allowed to delete themselves
  @@deny('delete', auth().role.name == "admin" && auth() == this)

  // no one can delete superAdmin
  @@deny('delete', role.name == "superAdmin")
  // only the admin can delete users
  @@allow('delete', auth().role.name == "admin")
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model NewEmailVerificationToken {
  id String @id @default(cuid())
  email String
  userId String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

enum Theme {
  light
  dark
  system
}