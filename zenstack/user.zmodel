
import "./role"
// Necessary for Next auth
model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? // @db.Text
  access_token String? // @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? // @db.Text
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  password String @password @omit
  image String? @url
  theme Theme? @default(system)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts Account[]
  sessions Session[]
  role Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String
  /// created by which user
  createdBy User? @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdById String? @unique
  /// The users that this user has created
  createdUsers User[] @relation("UserCreatedBy")
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model NewEmailVerificationToken {
  id String @id @default(cuid())
  email String
  userId String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

enum Theme {
  light
  dark
  system
}